// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  TEACHER
  STUDENT
}

model User {
  id            String    @id @default(cuid())
  name          String?
  fullname      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  password      String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(STUDENT)
  ownCourse     Course[]
  joinCourse    Assign[]
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Course {
  id          String  @id @default(uuid())
  userId      String
  title       String  @db.Text
  description String? @db.Text
  imageUrl    String? @db.Text
  price       Float?
  isPublished Boolean @default(false)

  subjectId String?
  subjects  Subject? @relation(fields: [subjectId], references: [id])
  users     User     @relation(fields: [userId], references: [id])

  kelasId String?
  kelas   Kelas?  @relation(fields: [kelasId], references: [id])

  chapters    Chapter[]
  attachments Attachment[]
  assigns     Assign[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([subjectId, userId])
}

model Subject {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model Kelas {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model Attachment {
  id   String @id @default(uuid())
  name String
  url  String @db.Text

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Chapter {
  id          String  @id @default(uuid())
  title       String
  description String? @db.Text
  videoUrl    String? @db.Text
  position    Int
  isPublished Boolean @default(false)

  videosData VideoData?

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model VideoData {
  id         String @id @default(uuid())
  videoTitle String

  chapterId String  @unique
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id     String @id @default(uuid())
  userId String

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model Assign {
  id     String @id @default(uuid())
  userId String
  users  User   @relation(fields: [userId], references: [id])

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([userId, courseId])
  @@index([courseId, userId])
}

model Article {
  id        String  @id @default(uuid())
  title     String  @db.Text
  text      String  @db.Text
  thumbnail String? @db.Text

  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
}

model Category {
  id       String    @id @default(uuid())
  name     String    @unique
  articles Article[]
}

// model StripeCustomer {
//   id               String @id @default(uuid())
//   userId           String @unique
//   stripeCustomerId String @unique

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

// model Video {
//   VideoID     String @id @default(cuid())
//   MateriID    String
//   Url_path    String
//   Title_Video String
//   Short_Desc  String
//   Materi      Materi @relation("MateriToVideo", fields: [MateriID], references: [MateriID])
// }

// model Kelas {
//   KelasID  String    @id @default(cuid())
//   Kelas    String
//   materis  Materi[]  @relation("KelasToMateri")
//   subjects Subject[] @relation("SubjectToKelas")
// }

// model Subject {
//   SubjectID String   @id @default(cuid())
//   Subject   String
//   KelasID   String
//   kelas     Kelas    @relation("SubjectToKelas", fields: [KelasID], references: [KelasID])
//   materis   Materi[] @relation("SubjectToMateri")
// }
